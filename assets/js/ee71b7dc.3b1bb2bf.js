"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[670],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),g=a,u=p["".concat(s,".").concat(g)]||p[g]||m[g]||o;return t?r.createElement(u,i(i({ref:n},c),{},{components:t})):r.createElement(u,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7680:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:6},i="@modular-component/with-fragment",l={unversionedId:"extensions/official/with-fragment",id:"extensions/official/with-fragment",title:"@modular-component/with-fragment",description:"ModularComponent stage allowing to cut the render phase into multiple fragments that can be composed together in the",source:"@site/docs/extensions/official/with-fragment.md",sourceDirName:"extensions/official",slug:"/extensions/official/with-fragment",permalink:"/docs/extensions/official/with-fragment",draft:!1,editUrl:"https://github.com/modular-component/website/docs/extensions/official/with-fragment.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"@modular-component/with-conditional-render",permalink:"/docs/extensions/official/with-conditional-render"}},s={},d=[{value:"Usage",id:"usage",level:2},{value:"Implementation",id:"implementation",level:2}],c={toc:d};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"modular-componentwith-fragment"},"@modular-component/with-fragment"),(0,a.kt)("p",null,"ModularComponent stage allowing to cut the render phase into multiple fragments that can be composed together in the\nrender stage. It can make conditional rendering easier to read and reduce duplication."),(0,a.kt)("p",null,"It can either return a map of React node accessible through the ",(0,a.kt)("inlineCode",{parentName:"p"},"fragments")," field, or be called multiple times by\nspecifying a field key to use and returning a single React node."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ModularComponent, render } from '@modular-component/core'\nimport { fragment } from '@modular-component/with-fragment'\n\n// Through multiple calls\nconst MultipleCalls = ModularComponent<{ loading: boolean }>()\n  .with(fragment('loading', () => <div>Loading...</div>))\n  .with(fragment('loaded', () => <div>Loaded</div>))\n  .with(render(({ props, loading, loaded }) => (\n    <div>Current status: {props.loading ? loading : loaded}</div>\n  )))\n\n// Through a single call\nconst SingleCall = ModularComponent<{ loading: boolean }>()\n  .with(fragment(() => ({\n    loading: <div>Loading...</div>,\n    loaded: <div>Loaded</div>,\n  }))\n  .with(render(({ props, fragments }) => (\n    <div>Current status: {props.loading ? fragments.loading : fragments.loaded}</div>\n  ))))\n")),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"with(fragment)")," receives a function taking the current arguments map as parameter and returns either a map of React node\nor a single React node, to set as stage function, and optionally a key to be used as the field."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { ReactNode } from 'react'\nimport { ModularStage } from '@modular-component/core'\n\nexport function fragment<\n  Args extends {},\n  Fragments extends Record<string, ReactNode>,\n>(\n  useFragment: (args: Args) => Fragments,\n): ModularStage<'fragments', (args: Args) => Fragments>\nexport function fragment<\n  Args extends {},\n  Fragment extends ReactNode,\n  Key extends string,\n>(\n  key: Key,\n  useFragment: (args: Args) => Fragment,\n): ModularStage<Key, (args: Args) => Fragment>\n\nexport function fragment<Key extends string, Stage extends () => unknown>(\n  key: Key | Stage,\n  useFragment?: Stage,\n): ModularStage<Key, Stage> {\n  return {\n    field: (typeof key === 'string' ? key : 'fragments') as Key,\n    useStage: (typeof key === 'string' ? useFragment : key) as Stage,\n  }\n}\n")))}m.isMDXComponent=!0}}]);