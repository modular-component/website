"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[147],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>u});var o=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,o,i=function(n,e){if(null==n)return{};var t,o,i={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var d=o.createContext({}),s=function(n){var e=o.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},c=function(n){var e=s(n.components);return o.createElement(d.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},m=o.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,d=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),m=s(t),u=i,f=m["".concat(d,".").concat(u)]||m[u]||p[u]||a;return t?o.createElement(f,r(r({ref:e},c),{},{components:t})):o.createElement(f,r({ref:e},c))}));function u(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,r=new Array(a);r[0]=m;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=n,l.mdxType="string"==typeof n?n:i,r[1]=l;for(var s=2;s<a;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1150:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=t(7462),i=(t(7294),t(3905));const a={sidebar_position:5},r="@modular-component/with-conditional-render",l={unversionedId:"extensions/official/with-conditional-render",id:"extensions/official/with-conditional-render",title:"@modular-component/with-conditional-render",description:"Provides three stages that allow conditional rendering in ModularComponents:",source:"@site/docs/extensions/official/with-conditional-render.md",sourceDirName:"extensions/official",slug:"/extensions/official/with-conditional-render",permalink:"/docs/extensions/official/with-conditional-render",draft:!1,editUrl:"https://github.com/modular-component/website/docs/extensions/official/with-conditional-render.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"@modular-component/with-components",permalink:"/docs/extensions/official/with-components"}},d={},s=[{value:"Usage",id:"usage",level:2},{value:"Multiple conditions and fallbacks",id:"multiple-conditions-and-fallbacks",level:2},{value:"Implementation",id:"implementation",level:2}],c={toc:s};function p(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,o.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"modular-componentwith-conditional-render"},"@modular-component/with-conditional-render"),(0,i.kt)("p",null,"Provides three stages that allow conditional rendering in ",(0,i.kt)("inlineCode",{parentName:"p"},"ModularComponent"),"s:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withCondition")," will set a ",(0,i.kt)("inlineCode",{parentName:"li"},"condition")," argument to either ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", based\non current arguments,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withConditionalFallback")," takes a ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionComponent")," as parameter, and\nrenders it when the ",(0,i.kt)("inlineCode",{parentName:"li"},"condition")," argument is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),","),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withConditionalRender")," also takes a ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionComponent")," as parameter, and\nrenders it when the ",(0,i.kt)("inlineCode",{parentName:"li"},"condition")," argument is ",(0,i.kt)("em",{parentName:"li"},"not")," set to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("p",null,"Calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"addCondition")," will take into account preceding conditions, so that ",(0,i.kt)("inlineCode",{parentName:"p"},"withConditionalRender"),"\nis only called when all conditions return ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"Calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"addConditionalFallback")," will take into account preceding fallbacks, so that only the ",(0,i.kt)("em",{parentName:"p"},"first")," falsy-condition\nfallback is rendered."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { modularFactory } from '@modular-component/core'\nimport { WithConditionalRender } from '@modular-component/with-conditional-render'\n\nconst ModularComponent = modularFactory\n  .extend(WithConditionalRender)\n  .build()\n\nconst ConditionalComponent = ModularComponent<{ enabled?: boolean }>()\n  .withCondition(({ props }) => props.enabled === true)\n  .withConditionalFallback(() => <>I'm disabled!</>)\n  .withLifecycle(() => {\n    // Some data fetching logic...\n    return { loading, data }\n  })\n  .addCondition(({ lifecycle }) => lifecycle.loading === false)\n  .addConditionalFallback(() => <>I'm loading!</>)\n  .withConditionalRender(({ lifecycle }) => (\n    <>I'm enabled and loaded, here is the content: {lifecycle.data}</>\n  ))\n")),(0,i.kt)("h2",{id:"multiple-conditions-and-fallbacks"},"Multiple conditions and fallbacks"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"addCondition")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"addFallbackRender")," allow chaining multiple conditions with a different fallback for each."),(0,i.kt)("p",null,"Calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"addCondition")," will take into account preceding conditions,\nso that ",(0,i.kt)("inlineCode",{parentName:"p"},"addConditionalRender")," is only called when all conditions return ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"Calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"addConditionalFallback")," will take into account preceding fallbacks, so that only the ",(0,i.kt)("em",{parentName:"p"},"first")," falsy-condition\nfallback is rendered."),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,"The implementation for those stages is a bit more involved than other official extensions. Here, we have restrictions\nfor each stage, as well as transform functions. Furthermore, the transform functions for ",(0,i.kt)("inlineCode",{parentName:"p"},"withConditionalRender")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"withConditonalFallback"),"\ncan return ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," instead of the passed value, so we need to register a TypeScript transform for those stages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createMethodRecord } from '@modular-component/core'\n\nimport { FunctionComponent } from 'react'\n\nconst withCondition = Symbol()\nconst withConditionalFallback = Symbol()\nconst withConditionalRender = Symbol()\n\ndeclare module '@modular-component/core' {\n  export interface ModularStages<Args, Value> {\n    [withCondition]: {\n      restrict: (args: Args) => boolean\n      transform: ReturnType<\n        Value extends (args: Args) => infer T ? T : never\n      >\n    }\n    [withConditionalFallback]: {\n      restrict: FunctionComponent<Args>\n      transform: ReturnType<FunctionComponent<Args>> | null\n    }\n    [withConditionalRender]: {\n      restrict: FunctionComponent<Args>\n      transform: ReturnType<FunctionComponent<Args>> | null\n    }\n  }\n}\n\nexport const WithConditionalRender = createMethodRecord({\n  Condition: {\n    symbol: withCondition,\n    field: 'condition',\n    transform: <\n      A extends { condition?: boolean },\n      C extends (args: A) => boolean,\n    >(\n      args: A,\n      useCondition: C,\n    ) => args.condition !== false && useCondition(args),\n  },\n  ConditionalRender: {\n    symbol: withConditionalRender,\n    field: 'render',\n    transform: <\n      A extends { condition?: boolean; render?: ReturnType<FunctionComponent> },\n      P extends FunctionComponent<A>,\n    >(\n      args: A,\n      useRender: P,\n    ) => {\n      if (args.condition === false) {\n        return args.render\n      }\n\n      return useRender(args)\n    },\n  },\n  ConditionalFallback: {\n    symbol: withConditionalFallback,\n    field: 'render',\n    transform: <\n      A extends { condition?: boolean; render?: ReturnType<FunctionComponent> },\n      P extends FunctionComponent<A>,\n    >(\n      args: A,\n      useRender: P,\n    ) => {\n      if (args.condition !== false || args.render) {\n        return args.render\n      }\n\n      return useRender(args)\n    },\n  },\n} as const)\n")))}p.isMDXComponent=!0}}]);