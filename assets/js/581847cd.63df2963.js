"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[147],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=o.createContext({}),s=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),u=i,f=m["".concat(d,".").concat(u)]||m[u]||p[u]||r;return t?o.createElement(f,a(a({ref:n},c),{},{components:t})):o.createElement(f,a({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<r;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=t(7462),i=(t(7294),t(3905));const r={sidebar_position:5},a="@modular-component/with-conditional-render",l={unversionedId:"extensions/official/with-conditional-render",id:"extensions/official/with-conditional-render",title:"@modular-component/with-conditional-render",description:"Provides three stages that allow conditional rendering in ModularComponents:",source:"@site/docs/extensions/official/with-conditional-render.md",sourceDirName:"extensions/official",slug:"/extensions/official/with-conditional-render",permalink:"/docs/extensions/official/with-conditional-render",draft:!1,editUrl:"https://github.com/modular-component/website/docs/extensions/official/with-conditional-render.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"@modular-component/with-components",permalink:"/docs/extensions/official/with-components"}},d={},s=[{value:"Usage",id:"usage",level:2},{value:"Multiple calls",id:"multiple-calls",level:2},{value:"Implementation",id:"implementation",level:2}],c={toc:s};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"modular-componentwith-conditional-render"},"@modular-component/with-conditional-render"),(0,i.kt)("p",null,"Provides three stages that allow conditional rendering in ",(0,i.kt)("inlineCode",{parentName:"p"},"ModularComponent"),"s:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withCondition")," will set a ",(0,i.kt)("inlineCode",{parentName:"li"},"condition")," argument to either ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", based\non current arguments,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withConditionalFallback")," takes a ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionComponent")," as parameter, and\nrenders it when the ",(0,i.kt)("inlineCode",{parentName:"li"},"condition")," argument is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),","),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withConditionalRender")," also takes a ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionComponent")," as parameter, and\nrenders it when the ",(0,i.kt)("inlineCode",{parentName:"li"},"condition")," argument is ",(0,i.kt)("em",{parentName:"li"},"not")," set to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"withCondition")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"withConditionalFallback")," are multiple, so it's possible\nto chain multiple conditions with a different fallback for each. Subsequent calls\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"withCondition")," will take into account preceding conditions, so that ",(0,i.kt)("inlineCode",{parentName:"p"},"withConditionalRender"),"\nis only called when all conditions return ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { modularFactory } from '@modular-component/core'\nimport { WithConditionalRender } from '@modular-component/with-conditional-render'\n\nconst ModularComponent = modularFactory\n  .extend(WithConditionalRender)\n  .build()\n\nconst ConditionalComponent = ModularComponent<{ enabled?: boolean }>()\n  .withCondition(({ props }) => props.enabled === true)\n  .withFallbackRender(() => <>I'm disabled!</>)\n  .withLifecycle(() => {\n    // Some data fetching logic...\n    return { loading, data }\n  })\n  .withCondition(({ lifecycle }) => lifecycle.loading === false)\n  .withFallbackrender(() => <>I'm loading!</>)\n  .withConditionalRender(({ lifecycle }) => (\n    <>I'm enabled and loaded, here is the content: {lifecycle.data}</>\n  ))\n")),(0,i.kt)("h2",{id:"multiple-calls"},"Multiple calls"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"withConditionalRender")," is a ",(0,i.kt)("strong",{parentName:"p"},"single")," stage, further calls to the stage will ",(0,i.kt)("em",{parentName:"p"},"replace")," the stage definition in its original place.\nAs a render stage, it will most likely be the last stage of a component anyway."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"withCondition")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"withFallbackRender")," are ",(0,i.kt)("strong",{parentName:"p"},"multiple")," stages, further calls will add new stages, allowing to chain multiple\nconditions with a different fallback for each. Subsequent calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"withCondition")," will take into account preceding conditions,\nso that ",(0,i.kt)("inlineCode",{parentName:"p"},"withConditionalRender")," is only called when all conditions return ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,"The implementation for those stages is a bit more involved than other official extensions. Here, we have restrictions\nfor each stage, as well as transform functions. Furthermore, the transform functions for ",(0,i.kt)("inlineCode",{parentName:"p"},"withConditionalRender")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"withConditonalFallback"),"\ncan return ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," instead of the passed value, so we need to register a TypeScript transform for those stages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createMethodRecord } from '@modular-component/core'\nimport { FunctionComponent } from 'react'\n\nconst withConditionalFallback = Symbol()\nconst withConditionalRender = Symbol()\n\nexport const WithConditionalRender = createMethodRecord({\n  withCondition: {\n    field: 'condition',\n    multiple: true,\n    transform: <\n      A extends { condition?: boolean },\n      C extends (args: A) => boolean,\n    >(\n      args: A,\n      useCondition: C,\n    ) =>\n      args.condition !== false &&\n      (typeof useCondition === 'function' ? useCondition(args) : useCondition),\n    restrict: {} as boolean,\n  },\n  withConditionalFallback: {\n    field: 'render',\n    multiple: true,\n    symbol: withConditionalFallback,\n    transform: <\n      A extends { condition?: boolean; render?: ReturnType<FunctionComponent> },\n      P extends FunctionComponent<A>,\n    >(\n      args: A,\n      useRender: P,\n    ) => {\n      if (args.condition !== false || args.render) {\n        return args.render\n      }\n\n      return typeof useRender === 'function' ? useRender(args) : useRender\n    },\n    restrict: {} as ReturnType<FunctionComponent>,\n  },\n  withConditionalRender: {\n    field: 'render',\n    symbol: withConditionalRender,\n    transform: <\n      A extends { condition?: boolean; render?: ReturnType<FunctionComponent> },\n      P extends FunctionComponent<A>,\n    >(\n      args: A,\n      useRender: P,\n    ) => {\n      if (args.condition === false) {\n        return args.render\n      }\n\n      return typeof useRender === 'function' ? useRender(args) : useRender\n    },\n    restrict: {} as ReturnType<FunctionComponent>,\n  },\n} as const)\n\ndeclare module '@modular-component/core' {\n  export interface ModularStageTransform<T> {\n    [withConditionalFallback]: T | null\n    [withConditionalRender]: T | null\n  }\n}\n")))}p.isMDXComponent=!0}}]);