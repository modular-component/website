"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return n?o.createElement(f,i(i({ref:t},s),{},{components:n})):o.createElement(f,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:4},i="@modular-component/with-components",l={unversionedId:"extensions/official/with-components",id:"extensions/official/with-components",title:"@modular-component/with-components",description:"Provides a withComponents stage that fills the components argument with",source:"@site/docs/extensions/official/with-components.md",sourceDirName:"extensions/official",slug:"/extensions/official/with-components",permalink:"/docs/extensions/official/with-components",draft:!1,editUrl:"https://github.com/modular-component/website/docs/extensions/official/with-components.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"@modular-component/with-lifecycle",permalink:"/docs/extensions/official/with-lifecycle"},next:{title:"@modular-component/with-conditional-render",permalink:"/docs/extensions/official/with-conditional-render"}},c={},p=[{value:"Usage",id:"usage",level:2},{value:"Multiple calls",id:"multiple-calls",level:2},{value:"Implementation",id:"implementation",level:2}],s={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"modular-componentwith-components"},"@modular-component/with-components"),(0,a.kt)("p",null,"Provides a ",(0,a.kt)("inlineCode",{parentName:"p"},"withComponents")," stage that fills the ",(0,a.kt)("inlineCode",{parentName:"p"},"components")," argument with\na map of React components. Useful when running tests in an environment that\ndoes not allow module mocking: sub-components can be stubbed in tests by\ncalling the stage again to replace their implementations."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { modularFactory } from '@modular-component/core'\nimport { WithComponents } from '@modular-component/with-components'\n\nimport { SomeComponent } from 'some-component'\n\nconst ModularComponent = modularFactory\n  .extend(WithComponents)\n  .build()\n\nconst MyComponent = ModularComponent()\n  .withComponents({ SomeComponent })\n  .withRender(({ props, components }) => (\n    <components.SomeComponent />\n  ))\n")),(0,a.kt)("h2",{id:"multiple-calls"},"Multiple calls"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"withComponents")," is a ",(0,a.kt)("strong",{parentName:"p"},"single")," stage, further calls to the stage will ",(0,a.kt)("em",{parentName:"p"},"replace")," the stage definition in its original place."),(0,a.kt)("p",null,"It allows creating a clone of the component with a different sub-component implementation, either for tests or for content.\nFor instance, one could imagine a ",(0,a.kt)("inlineCode",{parentName:"p"},"Layout")," base component taking advantage of this functionnality:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const PageLayout = ModularComponent()\n  .withComponent({\n    Title: React.Fragment,\n    Subtitle: React.Fragment,\n    Content: React.Fragment,\n    Footer: React.Fragment\n  })\n  .withRender(({ components }) => (\n    // Build a layout using <components.Title />, <components.Subtitle />...\n  ))\n\nconst PageOne = PageLayout.withComponent({\n  Title: () => <>First page</>,\n  Subtitle: () => <>I have a subtitle but no footer</>,\n  Content: () => <>First page content</>,\n  Footer: React.Fragment\n})\n\nconst PageTwo = PageLayout.withComponent({\n  Title: () => <>Second page</>,\n  Subtitle: React.Fragment,\n  Content: () => <>Second page content</>,\n  Footer: () => <>I have a footer but no subtitle</>\n})\n")),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"withComponents")," is a simple stage adding the map as a ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," argument. It has a restriction\non accepted values, to only accept a map of React components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ComponentType } from 'react'\n\nimport { createMethodRecord } from '@modular-component/core'\n\nexport const WithComponents = createMethodRecord({\n  withComponents: {\n    field: 'components',\n    restrict: {} as Record<string, ComponentType<any>>,\n  },\n} as const)\n")))}m.isMDXComponent=!0}}]);